{"ast":null,"code":"// import React, { useEffect, useRef } from 'react';\n\n// function VideoCall() {\n//   const localVideoRef = useRef(null);\n//   const remoteVideoRef = useRef(null);\n//   const ws = useRef(null);\n\n//   useEffect(() => {\n\n//     // Initialize WebSocket connection\n//     ws.current = new WebSocket('ws://localhost:5000');\n\n//     ws.current.onmessage = (event) => {\n//       console.log('Received:', event.data);\n//       // Handle signaling messages here\n//     };\n\n//     // Setup video streams\n//     const getUserMedia = async () => {\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//       localVideoRef.current.srcObject = stream;\n//     };\n\n//     getUserMedia();\n\n//     return () => {\n//       if (ws.current) ws.current.close();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <video ref={localVideoRef} autoPlay muted />\n//       <video ref={remoteVideoRef} autoPlay />\n//     </div>\n//   );\n// }\n\n// export default VideoCall;\n\nws.current.onmessage = async event => {\n  const message = JSON.parse(event.data);\n  console.log('Received:', message);\n  if (message.offer) {\n    await handleOffer(message.offer);\n  } else if (message.answer) {\n    await handleAnswer(message.answer);\n  } else if (message.iceCandidate) {\n    await handleIceCandidate(message.iceCandidate);\n  }\n};\nconst handleOffer = async offer => {\n  if (!peerConnection) createPeerConnection();\n  await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n  const answer = await peerConnection.createAnswer();\n  await peerConnection.setLocalDescription(answer);\n  ws.current.send(JSON.stringify({\n    answer\n  }));\n};\nconst handleAnswer = async answer => {\n  if (!peerConnection) createPeerConnection();\n  await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n};\nconst handleIceCandidate = async iceCandidate => {\n  if (peerConnection) {\n    await peerConnection.addIceCandidate(new RTCIceCandidate(iceCandidate));\n  }\n};","map":{"version":3,"names":["ws","current","onmessage","event","message","JSON","parse","data","console","log","offer","handleOffer","answer","handleAnswer","iceCandidate","handleIceCandidate","peerConnection","createPeerConnection","setRemoteDescription","RTCSessionDescription","createAnswer","setLocalDescription","send","stringify","addIceCandidate","RTCIceCandidate"],"sources":["C:/Users/kushb/OneDrive/Desktop/video-chat-app/client/src/components/VideoCall.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\r\n\r\n// function VideoCall() {\r\n//   const localVideoRef = useRef(null);\r\n//   const remoteVideoRef = useRef(null);\r\n//   const ws = useRef(null);\r\n\r\n//   useEffect(() => {\r\n    \r\n//     // Initialize WebSocket connection\r\n//     ws.current = new WebSocket('ws://localhost:5000');\r\n\r\n//     ws.current.onmessage = (event) => {\r\n//       console.log('Received:', event.data);\r\n//       // Handle signaling messages here\r\n//     };\r\n\r\n//     // Setup video streams\r\n//     const getUserMedia = async () => {\r\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n//       localVideoRef.current.srcObject = stream;\r\n//     };\r\n\r\n//     getUserMedia();\r\n\r\n//     return () => {\r\n//       if (ws.current) ws.current.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <video ref={localVideoRef} autoPlay muted />\r\n//       <video ref={remoteVideoRef} autoPlay />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default VideoCall;\r\n\r\n\r\nws.current.onmessage = async (event) => {\r\n  const message = JSON.parse(event.data);\r\n  console.log('Received:', message);\r\n\r\n  if (message.offer) {\r\n    await handleOffer(message.offer);\r\n  } else if (message.answer) {\r\n    await handleAnswer(message.answer);\r\n  } else if (message.iceCandidate) {\r\n    await handleIceCandidate(message.iceCandidate);\r\n  }\r\n};\r\n\r\nconst handleOffer = async (offer) => {\r\n  if (!peerConnection) createPeerConnection();\r\n  await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n  const answer = await peerConnection.createAnswer();\r\n  await peerConnection.setLocalDescription(answer);\r\n  ws.current.send(JSON.stringify({ answer }));\r\n};\r\n\r\nconst handleAnswer = async (answer) => {\r\n  if (!peerConnection) createPeerConnection();\r\n  await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n};\r\n\r\nconst handleIceCandidate = async (iceCandidate) => {\r\n  if (peerConnection) {\r\n    await peerConnection.addIceCandidate(new RTCIceCandidate(iceCandidate));\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGAA,EAAE,CAACC,OAAO,CAACC,SAAS,GAAG,MAAOC,KAAK,IAAK;EACtC,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;EACtCC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEL,OAAO,CAAC;EAEjC,IAAIA,OAAO,CAACM,KAAK,EAAE;IACjB,MAAMC,WAAW,CAACP,OAAO,CAACM,KAAK,CAAC;EAClC,CAAC,MAAM,IAAIN,OAAO,CAACQ,MAAM,EAAE;IACzB,MAAMC,YAAY,CAACT,OAAO,CAACQ,MAAM,CAAC;EACpC,CAAC,MAAM,IAAIR,OAAO,CAACU,YAAY,EAAE;IAC/B,MAAMC,kBAAkB,CAACX,OAAO,CAACU,YAAY,CAAC;EAChD;AACF,CAAC;AAED,MAAMH,WAAW,GAAG,MAAOD,KAAK,IAAK;EACnC,IAAI,CAACM,cAAc,EAAEC,oBAAoB,CAAC,CAAC;EAC3C,MAAMD,cAAc,CAACE,oBAAoB,CAAC,IAAIC,qBAAqB,CAACT,KAAK,CAAC,CAAC;EAC3E,MAAME,MAAM,GAAG,MAAMI,cAAc,CAACI,YAAY,CAAC,CAAC;EAClD,MAAMJ,cAAc,CAACK,mBAAmB,CAACT,MAAM,CAAC;EAChDZ,EAAE,CAACC,OAAO,CAACqB,IAAI,CAACjB,IAAI,CAACkB,SAAS,CAAC;IAAEX;EAAO,CAAC,CAAC,CAAC;AAC7C,CAAC;AAED,MAAMC,YAAY,GAAG,MAAOD,MAAM,IAAK;EACrC,IAAI,CAACI,cAAc,EAAEC,oBAAoB,CAAC,CAAC;EAC3C,MAAMD,cAAc,CAACE,oBAAoB,CAAC,IAAIC,qBAAqB,CAACP,MAAM,CAAC,CAAC;AAC9E,CAAC;AAED,MAAMG,kBAAkB,GAAG,MAAOD,YAAY,IAAK;EACjD,IAAIE,cAAc,EAAE;IAClB,MAAMA,cAAc,CAACQ,eAAe,CAAC,IAAIC,eAAe,CAACX,YAAY,CAAC,CAAC;EACzE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}